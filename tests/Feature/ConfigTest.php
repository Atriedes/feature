<?php

namespace Test\Feature;

use Feature\Config;
use Feature\Contracts\User;
use Feature\Contracts\World;

class ConfigTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \PHPUnit_Framework_MockObject_MockObject | World
     */
    private $worldMock;

    /**
     * @var \PHPUnit_Framework_MockObject_MockObject | User
     */
    private $userMock;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->worldMock = $this->getMock(World::class);
        $this->userMock = $this->getMock(User::class);
    }

    public function testSimpleEnabledFeature()
    {
        $config = new Config('my_feature', ['enabled' => 'on'], $this->worldMock);

        $this->assertTrue($config->isEnabled());
    }

    public function testSimpleDisabledFeature()
    {
        $config = new Config('my_feature', ['enabled' => 'off'], $this->worldMock);

        $this->assertFalse($config->isEnabled());
    }

    public function testEnabledFeatureVariant()
    {
        $config = new Config('my_feature', 'variant', $this->worldMock);

        $this->assertTrue($config->isEnabled());
        $this->assertEquals($config->variant(), 'variant');
    }

    public function testEnabled100PercentFeature()
    {
        $config = new Config(
            'my_feature',
            ['enabled' => 100],
            $this->worldMock
        );

        $this->assertTrue($config->isEnabled());
    }

    public function testEnabled100PercentFeatureWithRandomBucketing()
    {
        $config = new Config(
            'my_feature',
            ['enabled' => 100, 'bucketing' => 'random'],
            $this->worldMock
        );

        $this->assertTrue($config->isEnabled());
    }

    public function testEnabled100PercentFeatureWithUserBucketing()
    {
        $this->worldMock->method('userId')->willReturn(1);
        $config = new Config(
            'my_feature',
            ['enabled' => 100, 'bucketing' => 'user'],
            $this->worldMock
        );

        $this->assertTrue($config->isEnabled());
    }

    public function testDisabled100PercentFeature()
    {
        $config = new Config(
            'my_feature',
            ['enabled' => 0],
            $this->worldMock
        );

        $this->assertFalse($config->isEnabled());
    }

    public function test100PercentEnabledVariant()
    {
        $config = new Config(
            'my_feature',
            ['enabled' => ['variant1' => 100, 'variant' => 0]],
            $this->worldMock
        );

        $this->assertTrue($config->isEnabled());

        $this->assertEquals($config->variant(), 'variant1');
    }

    public function testFeatureOnlyEnabledForAdmin()
    {
        $this->worldMock->method('isAdmin')->withAnyParameters()->willReturn(true);
        $this->worldMock->method('userId')->willReturn('1');

        $config = new Config(
            'my_feature',
            ['admin' => 'on'],
            $this->worldMock
        );

        $this->assertTrue($config->isEnabled());
    }

    public function testEnabledFeatureOnlyForCertainUser()
    {
        $this->userMock->method('getId')->willReturn(1);
        $this->worldMock->method('userName')->withAnyParameters()->willReturn('bob');

        $config = new Config(
            'my_feature',
            ['users' => 'bob'],
            $this->worldMock
        );

        $this->assertTrue($config->isEnabledFor($this->userMock));
    }

    public function testDisabledFeatureForCertainUser()
    {
        $this->userMock->method('getId')->willReturn(1);
        $this->worldMock->method('userName')->withAnyParameters()->willReturn('bob');

        $config = new Config(
            'my_feature',
            ['users' => 'alice'],
            $this->worldMock
        );

        $this->assertFalse($config->isEnabledFor($this->userMock));
    }
}
